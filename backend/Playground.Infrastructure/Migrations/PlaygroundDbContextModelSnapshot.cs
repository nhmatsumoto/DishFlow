// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Playground.Infrastructure.Context;

#nullable disable

namespace Playground.Infrastructure.Migrations
{
    [DbContext(typeof(PlaygroundDbContext))]
    partial class PlaygroundDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Playground.Domain.Entities.IndirectCost", b =>
                {
                    b.Property<Guid>("IndirectCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IndirectCostId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("IndirectCosts");
                });

            modelBuilder.Entity("Playground.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Playground.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RecipeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Playground.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<Guid>("RecipeIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RecipeIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredient");
                });

            modelBuilder.Entity("Playground.Domain.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDishesSold")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Playground.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Playground.Domain.Entities.IndirectCost", b =>
                {
                    b.HasOne("Playground.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("IndirectCosts")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Playground.Domain.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("IndirectCostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Value_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value_Currency");

                            b1.HasKey("IndirectCostId");

                            b1.ToTable("IndirectCosts");

                            b1.WithOwner()
                                .HasForeignKey("IndirectCostId");
                        });

                    b.OwnsOne("Playground.Domain.ValueObjects.CostCategory", "Category", b1 =>
                        {
                            b1.Property<Guid>("IndirectCostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CategoryName");

                            b1.HasKey("IndirectCostId");

                            b1.ToTable("IndirectCosts");

                            b1.WithOwner()
                                .HasForeignKey("IndirectCostId");
                        });

                    b.OwnsOne("Playground.Domain.ValueObjects.Period", "Period", b1 =>
                        {
                            b1.Property<Guid>("IndirectCostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("PeriodType");

                            b1.HasKey("IndirectCostId");

                            b1.ToTable("IndirectCosts");

                            b1.WithOwner()
                                .HasForeignKey("IndirectCostId");
                        });

                    b.Navigation("Category")
                        .IsRequired();

                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Playground.Domain.Entities.Ingredient", b =>
                {
                    b.OwnsOne("Playground.Domain.ValueObjects.UnitOfMeasure", "Unit", b1 =>
                        {
                            b1.Property<Guid>("IngredientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UnitSymbol");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredients");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });

                    b.OwnsOne("Playground.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("IngredientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UnitPrice_Currency");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredients");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });

                    b.Navigation("Unit")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Playground.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("Playground.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Recipes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Playground.Domain.ValueObjects.Percentage", "ProfitMargin", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ProfitMargin");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.Navigation("ProfitMargin")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Playground.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("Playground.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Playground.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Playground.Domain.ValueObjects.UnitOfMeasure", "QuantityUnit", b1 =>
                        {
                            b1.Property<Guid>("RecipeIngredientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("QuantityUnitSymbol");

                            b1.HasKey("RecipeIngredientId");

                            b1.ToTable("RecipeIngredient");

                            b1.WithOwner()
                                .HasForeignKey("RecipeIngredientId");
                        });

                    b.OwnsOne("Playground.Domain.ValueObjects.Money", "UnitCost", b1 =>
                        {
                            b1.Property<Guid>("RecipeIngredientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitCost_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UnitCost_Currency");

                            b1.HasKey("RecipeIngredientId");

                            b1.ToTable("RecipeIngredient");

                            b1.WithOwner()
                                .HasForeignKey("RecipeIngredientId");
                        });

                    b.Navigation("Ingredient");

                    b.Navigation("QuantityUnit")
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("UnitCost")
                        .IsRequired();
                });

            modelBuilder.Entity("Playground.Domain.Entities.User", b =>
                {
                    b.HasOne("Playground.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Owners")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Playground.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Playground.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("IndirectCosts");

                    b.Navigation("Owners");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
